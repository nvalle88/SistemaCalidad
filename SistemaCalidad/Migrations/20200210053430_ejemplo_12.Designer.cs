// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SistemaCalidad.Data;
using System;

namespace SistemaCalidad.Migrations
{
    [DbContext(typeof(CALIDADContext))]
    [Migration("20200210053430_ejemplo_12")]
    partial class ejemplo_12
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SistemaCalidad.Models.Analisis", b =>
                {
                    b.Property<int>("AnalisisId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<DateTime>("FechaAnalisis")
                        .HasColumnType("datetime");

                    b.Property<int>("MaquinaId");

                    b.Property<string>("NombreUsuario")
                        .IsRequired()
                        .HasMaxLength(256)
                        .IsUnicode(false);

                    b.Property<string>("NumeroOrden")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observaciones")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("ObservacionesAprobado")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<int>("ProductoId");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int>("Rollo");

                    b.Property<decimal>("Temperatura")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("Turno");

                    b.HasKey("AnalisisId");

                    b.HasIndex("ClienteId");

                    b.HasIndex("MaquinaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Analisis");
                });

            modelBuilder.Entity("SistemaCalidad.Models.AnalisisCertificado", b =>
                {
                    b.Property<int>("AnalisisCertificadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnalisisId");

                    b.Property<int>("CertificadoId");

                    b.HasKey("AnalisisCertificadoId");

                    b.HasIndex("AnalisisId");

                    b.HasIndex("CertificadoId");

                    b.ToTable("AnalisisCertificado");
                });

            modelBuilder.Entity("SistemaCalidad.Models.AnalisisMaterial", b =>
                {
                    b.Property<int>("AnalisisMateriaId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnalisisId");

                    b.Property<int>("MateriaId");

                    b.HasKey("AnalisisMateriaId");

                    b.HasIndex("AnalisisId");

                    b.HasIndex("MateriaId");

                    b.ToTable("AnalisisMaterial");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Certificado", b =>
                {
                    b.Property<int>("CertificadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ArchivoCargado");

                    b.Property<string>("CodigoCertificado")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaGeneracion")
                        .HasColumnType("date");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false);

                    b.Property<bool?>("Liberado");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("NumeroGuia")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NumeroOrden")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("OrdenCliente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrdenFinal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("OrdenVenta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("PartidaArancelaria")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<string>("PedidoVenta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<int?>("ProductoFinalId");

                    b.Property<string>("Referencia")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int>("Tipo");

                    b.Property<decimal?>("Valor")
                        .HasColumnType("decimal(18, 9)");

                    b.Property<bool>("VerMateriaPrima");

                    b.HasKey("CertificadoId");

                    b.HasIndex("ProductoFinalId");

                    b.ToTable("Certificado");
                });

            modelBuilder.Entity("SistemaCalidad.Models.ClaseProducto", b =>
                {
                    b.Property<int>("ClaseProductoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaseDescripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("ClaseProductoId");

                    b.ToTable("ClaseProducto");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Cliente", b =>
                {
                    b.Property<int>("ClienteId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("CodigoCliente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("ClienteId");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("SistemaCalidad.Models.DetalleAnalisis", b =>
                {
                    b.Property<int>("DetalleAnalisisId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnalisisId");

                    b.Property<bool>("Aprobado");

                    b.Property<int>("AprobadoSupervisor")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((-1))");

                    b.Property<int>("EspecificacionId");

                    b.Property<string>("RangoReferenciaActual")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("DetalleAnalisisId");

                    b.HasIndex("AnalisisId");

                    b.HasIndex("EspecificacionId");

                    b.ToTable("DetalleAnalisis");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Especificacion", b =>
                {
                    b.Property<int>("EspecificacionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Analisis");

                    b.Property<string>("ClaseEspecificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("DescripcionIngles")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("TipoEspecificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("EspecificacionId");

                    b.ToTable("Especificacion");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Maquina", b =>
                {
                    b.Property<int>("MaquinaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("NombreMaquina")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MaquinaId");

                    b.ToTable("Maquina");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Aprobado");

                    b.Property<string>("CodigoIngreso")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Identificador")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("PaisId");

                    b.Property<int>("ProveedorId");

                    b.Property<decimal>("StockDisponible")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<int>("TipoMaterialId");

                    b.Property<int?>("TipoNormaId");

                    b.Property<string>("UnidadMedida")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MaterialId");

                    b.HasIndex("PaisId");

                    b.HasIndex("ProveedorId");

                    b.HasIndex("TipoMaterialId");

                    b.HasIndex("TipoNormaId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("SistemaCalidad.Models.MaterialEspecificacion", b =>
                {
                    b.Property<int>("MaterialEspecificacionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EspecificacionId");

                    b.Property<int>("MaterialId");

                    b.Property<string>("ValorEspecificacion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("MaterialEspecificacionId");

                    b.HasIndex("EspecificacionId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialEspecificacion");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Norma", b =>
                {
                    b.Property<int>("NormaId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("EspecificacionId");

                    b.Property<int?>("TipoNormaId");

                    b.Property<decimal?>("ValorMaximo");

                    b.Property<decimal?>("ValorMinimo");

                    b.HasKey("NormaId");

                    b.HasIndex("EspecificacionId");

                    b.HasIndex("TipoNormaId");

                    b.ToTable("Norma");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Pais", b =>
                {
                    b.Property<int>("PaisId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescripcionPais")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("PaisId");

                    b.ToTable("Pais");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Producto", b =>
                {
                    b.Property<int>("ProductoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClaseProductoId")
                        .IsRequired();

                    b.Property<string>("CodigoProducto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DefUsuario1")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DefUsuario2")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("DescripcionProducto")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<decimal?>("DimensionMaxima")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<decimal?>("DimensionMinima")
                        .HasColumnType("decimal(18, 5)");

                    b.Property<string>("Grado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Nominal")
                        .IsRequired()
                        .HasColumnType("decimal(18, 5)");

                    b.Property<string>("ObservacionProducto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.HasKey("ProductoId");

                    b.HasIndex("ClaseProductoId");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("SistemaCalidad.Models.ProductoEspecificacion", b =>
                {
                    b.Property<int>("ProductoEspecificacionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EspecificacionId");

                    b.Property<int>("ProductoId");

                    b.Property<decimal?>("RangoMaximo")
                        .IsRequired()
                        .HasColumnType("decimal(18, 9)");

                    b.Property<decimal?>("RangoMinimo")
                        .IsRequired()
                        .HasColumnType("decimal(18, 9)");

                    b.Property<string>("ValorEsperado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("ValorEsperadoNum")
                        .HasColumnType("decimal(18, 9)");

                    b.HasKey("ProductoEspecificacionId");

                    b.HasIndex("EspecificacionId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductoEspecificacion");
                });

            modelBuilder.Entity("SistemaCalidad.Models.ProductoFinal", b =>
                {
                    b.Property<int>("ProductoFinalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("ProductoId");

                    b.HasKey("ProductoFinalId");

                    b.HasIndex("ProductoId");

                    b.ToTable("ProductoFinal");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Proveedor", b =>
                {
                    b.Property<int>("ProveedorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodigoProveedor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("NombreProveedor")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.HasKey("ProveedorId");

                    b.ToTable("Proveedor");
                });

            modelBuilder.Entity("SistemaCalidad.Models.TipoMaterial", b =>
                {
                    b.Property<int>("TipoMaterialId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DescripcionTipoMaterial")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("TipoMaterialId");

                    b.ToTable("TipoMaterial");
                });

            modelBuilder.Entity("SistemaCalidad.Models.TipoMaterialEspecificacion", b =>
                {
                    b.Property<int>("TipoMaterialEspecificacionId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EspecificacionId");

                    b.Property<int>("TipoMaterialId");

                    b.HasKey("TipoMaterialEspecificacionId");

                    b.HasIndex("EspecificacionId");

                    b.HasIndex("TipoMaterialId");

                    b.ToTable("TipoMaterialEspecificacion");
                });

            modelBuilder.Entity("SistemaCalidad.Models.TipoNorma", b =>
                {
                    b.Property<int>("TipoNormaId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("DescripcionNorma")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Sae")
                        .IsRequired()
                        .HasColumnName("SAE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("TipoNormaId");

                    b.HasIndex("TipoNormaId")
                        .IsUnique()
                        .HasName("IX_TipoNorma");

                    b.ToTable("TipoNorma");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Analisis", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Cliente", "Cliente")
                        .WithMany("Analisis")
                        .HasForeignKey("ClienteId")
                        .HasConstraintName("FK_Analisis_Cliente");

                    b.HasOne("SistemaCalidad.Models.Maquina", "Maquina")
                        .WithMany("Analisis")
                        .HasForeignKey("MaquinaId")
                        .HasConstraintName("FK_Analisis_Maquina");

                    b.HasOne("SistemaCalidad.Models.Producto", "Producto")
                        .WithMany("Analisis")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_Analisis_Producto");
                });

            modelBuilder.Entity("SistemaCalidad.Models.AnalisisCertificado", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Analisis", "Analisis")
                        .WithMany("AnalisisCertificado")
                        .HasForeignKey("AnalisisId")
                        .HasConstraintName("FK_AnalisisCertificado_Analisis");

                    b.HasOne("SistemaCalidad.Models.Certificado", "Certificado")
                        .WithMany("AnalisisCertificado")
                        .HasForeignKey("CertificadoId")
                        .HasConstraintName("FK_AnalisisCertificado_Certificado");
                });

            modelBuilder.Entity("SistemaCalidad.Models.AnalisisMaterial", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Analisis", "Analisis")
                        .WithMany("AnalisisMaterial")
                        .HasForeignKey("AnalisisId")
                        .HasConstraintName("FK_AnalisisMaterial_Analisis");

                    b.HasOne("SistemaCalidad.Models.Material", "Materia")
                        .WithMany("AnalisisMaterial")
                        .HasForeignKey("MateriaId")
                        .HasConstraintName("FK_AnalisisMaterial_Material");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Certificado", b =>
                {
                    b.HasOne("SistemaCalidad.Models.ProductoFinal", "ProductoFinal")
                        .WithMany("Certificado")
                        .HasForeignKey("ProductoFinalId")
                        .HasConstraintName("FK_Certificado_ProductoFinal");
                });

            modelBuilder.Entity("SistemaCalidad.Models.DetalleAnalisis", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Analisis", "Analisis")
                        .WithMany("DetalleAnalisis")
                        .HasForeignKey("AnalisisId")
                        .HasConstraintName("FK_DetalleAnalisis_Analisis");

                    b.HasOne("SistemaCalidad.Models.Especificacion", "Especificacion")
                        .WithMany("DetalleAnalisis")
                        .HasForeignKey("EspecificacionId")
                        .HasConstraintName("FK_DetalleAnalisis_Especificacion");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Material", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Pais", "Pais")
                        .WithMany("Material")
                        .HasForeignKey("PaisId");

                    b.HasOne("SistemaCalidad.Models.Proveedor", "Proveedor")
                        .WithMany("Material")
                        .HasForeignKey("ProveedorId")
                        .HasConstraintName("FK_Material_Proveedor");

                    b.HasOne("SistemaCalidad.Models.TipoMaterial", "TipoMaterial")
                        .WithMany("Material")
                        .HasForeignKey("TipoMaterialId")
                        .HasConstraintName("FK_Material_TipoMaterial");

                    b.HasOne("SistemaCalidad.Models.TipoNorma", "TipoNorma")
                        .WithMany("Material")
                        .HasForeignKey("TipoNormaId")
                        .HasConstraintName("FK_Material_TipoNorma");
                });

            modelBuilder.Entity("SistemaCalidad.Models.MaterialEspecificacion", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Especificacion", "Especificacion")
                        .WithMany("MaterialEspecificacion")
                        .HasForeignKey("EspecificacionId")
                        .HasConstraintName("FK_MaterialEspecificacion_Especificacion");

                    b.HasOne("SistemaCalidad.Models.Material", "Material")
                        .WithMany("MaterialEspecificacion")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_MaterialEspecificacion_Material");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Norma", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Especificacion", "Especificacion")
                        .WithMany("Norma")
                        .HasForeignKey("EspecificacionId")
                        .HasConstraintName("FK_Norma_Especificacion");

                    b.HasOne("SistemaCalidad.Models.TipoNorma", "TipoNorma")
                        .WithMany("Norma")
                        .HasForeignKey("TipoNormaId")
                        .HasConstraintName("FK_Norma_TipoNorma");
                });

            modelBuilder.Entity("SistemaCalidad.Models.Producto", b =>
                {
                    b.HasOne("SistemaCalidad.Models.ClaseProducto", "ClaseProducto")
                        .WithMany("Producto")
                        .HasForeignKey("ClaseProductoId")
                        .HasConstraintName("FK_Producto_ClaseProducto")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SistemaCalidad.Models.ProductoEspecificacion", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Especificacion", "Especificacion")
                        .WithMany("ProductoEspecificacion")
                        .HasForeignKey("EspecificacionId")
                        .HasConstraintName("FK_ProductoEspecificacion_Especificacion");

                    b.HasOne("SistemaCalidad.Models.Producto", "Producto")
                        .WithMany("ProductoEspecificacion")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_ProductoEspecificacion_Producto");
                });

            modelBuilder.Entity("SistemaCalidad.Models.ProductoFinal", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Producto", "Producto")
                        .WithMany("ProductoFinal")
                        .HasForeignKey("ProductoId")
                        .HasConstraintName("FK_ProductoFinal_Producto");
                });

            modelBuilder.Entity("SistemaCalidad.Models.TipoMaterialEspecificacion", b =>
                {
                    b.HasOne("SistemaCalidad.Models.Especificacion", "Especificacion")
                        .WithMany("TipoMaterialEspecificacion")
                        .HasForeignKey("EspecificacionId")
                        .HasConstraintName("FK_TipoMaterialEspecificacion_Especificacion");

                    b.HasOne("SistemaCalidad.Models.TipoMaterial", "TipoMaterial")
                        .WithMany("TipoMaterialEspecificacion")
                        .HasForeignKey("TipoMaterialId")
                        .HasConstraintName("FK_TipoMaterialEspecificacion_TipoMaterial");
                });
#pragma warning restore 612, 618
        }
    }
}
